{"version":3,"sources":["generator/numbers/numbers.jsx","generator/colors/colors.jsx","generator/sequences/sequences-element.jsx","generator/sequences/sequences-randomize.jsx","App.js","serviceWorker.js","index.js"],"names":["Numbers","handleMinChange","event","newMin","parseInt","target","value","setState","min","handleMaxChange","newMax","max","handleSizeChange","newSize","size","handleClose","resultShow","setSettingsShow","visibility","settingsShow","state","result","prevResult","animate","this","alert","i","resultArr","Math","floor","random","newResult","cur","className","id","onAnimationEnd","Button","onClick","generateNum","Modal","show","centered","Header","Title","Body","map","item","Footer","variant","aria-controls","aria-expanded","Collapse","in","fluid","Form","Group","Label","Col","Control","type","onChange","React","Component","paletteList","ColorDisplay","hex","props","prevProps","r","substring","g","b","cmin","cmax","delta","h","s","l","round","abs","OverlayTrigger","placement","delay","hide","overlay","Tooltip","HexToRGB","HexToHSL","style","background","Colors","handlePaletteChange","selected","length","paletteType","colors","redHex","toString","greenHex","blueHex","concat","toUpperCase","c","x","m","RGBtoHex","red","green","blue","range","hue","saturation","lightness","HSLtoHex","newColors","rH","generateRandomColor","generateSingleHue","generateNeon","generatePastel","push","generateColor","controlId","as","key","SequencesElement","getRandomElement","SequencesRandomize","randomizeSequence","App","basename","Navbar","bg","expand","sticky","Brand","Link","to","Toggle","Nav","NavDropdown","title","Item","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83b0377b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Button, Col, Collapse, Form, Modal } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nconst MIN_VALUE = -1000000000;\r\nconst MAX_VALUE = 1000000000;\r\n\r\nclass Numbers extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      result: [0],\r\n      prevResult: 0,\r\n      min: 0,\r\n      max: 10,\r\n      size: 1,\r\n      settingsShow: false,\r\n      resultShow: false,\r\n      animate: false,\r\n    };\r\n  }\r\n\r\n  handleMinChange = (event) => {\r\n    var newMin = parseInt(event.target.value);\r\n    if (newMin < MIN_VALUE) {\r\n      newMin = MIN_VALUE;\r\n    }\r\n\r\n    this.setState({\r\n      min: newMin,\r\n    });\r\n  };\r\n\r\n  handleMaxChange = (event) => {\r\n    var newMax = parseInt(event.target.value);\r\n    if (newMax > MAX_VALUE) {\r\n      newMax = MAX_VALUE;\r\n    }\r\n\r\n    this.setState({\r\n      max: newMax,\r\n    });\r\n  };\r\n\r\n  handleSizeChange = (event) => {\r\n    var newSize = parseInt(event.target.value);\r\n    if (newSize < 1) {\r\n      newSize = 1;\r\n    }\r\n\r\n    this.setState({\r\n      size: newSize,\r\n    });\r\n  };\r\n\r\n  handleClose = (event) => {\r\n    this.setState({\r\n      resultShow: false,\r\n    });\r\n  };\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  generateNum() {\r\n    if (this.state.max <= this.state.min) {\r\n      alert(\"Invalid range!\");\r\n    } else if (this.state.size > 1) {\r\n      this.setState({ resultShow: true });\r\n      var resultArr = [];\r\n      var i;\r\n      for (i = 0; i < this.state.size; i++) {\r\n        resultArr[i] = Math.floor(\r\n          Math.random() * (this.state.max - this.state.min + 1) + this.state.min\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        result: resultArr,\r\n      });\r\n    } else {\r\n      let newResult = [\r\n        Math.floor(\r\n          Math.random() * (this.state.max - this.state.min + 1) + this.state.min\r\n        ),\r\n      ];\r\n\r\n      this.setState((cur) => ({\r\n        result: newResult,\r\n        prevResult: cur.result[0],\r\n        animate: true,\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Numbers</h1>\r\n        <p className=\"description-text\">\r\n          Get a series of random numbers within a range\r\n        </p>\r\n        <div className=\"result-container\">\r\n          <div\r\n            className={\r\n              this.state.animate\r\n                ? \"result-previous result-previous-animation\"\r\n                : \"result-previous\"\r\n            }\r\n            id=\"result-numbers-prev\"\r\n          >\r\n            {this.state.prevResult}\r\n          </div>\r\n          <div\r\n            className={\r\n              this.state.animate ? \"result result-num-animation\" : \"result\"\r\n            }\r\n            id=\"result-numbers\"\r\n            onAnimationEnd={() => this.setState({ animate: false })}\r\n          >\r\n            <b>{this.state.result[0]}</b>\r\n          </div>\r\n          <div className=\"result\"></div>\r\n        </div>\r\n\r\n        <Button onClick={() => this.generateNum()}>Generate</Button>\r\n        <br />\r\n\r\n        <Modal show={this.state.resultShow} size=\"lg\" centered>\r\n          <Modal.Header>\r\n            <Modal.Title>Result:</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <ul>\r\n              {this.state.result.map((item) => (\r\n                <li>{item}</li>\r\n              ))}\r\n            </ul>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow} fluid>\r\n            <Form>\r\n              <Form.Group>\r\n                <Form.Label>Min</Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.min}\r\n                    onChange={this.handleMinChange}\r\n                  ></Form.Control>\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>Max</Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.max}\r\n                    onChange={this.handleMaxChange}\r\n                  ></Form.Control>\r\n                </Col>\r\n              </Form.Group>\r\n              <hr />\r\n              <Form.Group>\r\n                <Col>\r\n                  <Form.Label>How many numbers to generate</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.size}\r\n                    onChange={this.handleSizeChange}\r\n                  ></Form.Control>\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Numbers;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Collapse,\r\n  Form,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nlet paletteList = [\r\n  \"None (Completely Random)\",\r\n  \"Selected Saturation (One Hue)\",\r\n  \"Complementary (Two Hues)\",\r\n  \"Triadic (Three Hues)\",\r\n  \"Neon\",\r\n  \"Pastel\",\r\n];\r\n\r\nclass ColorDisplay extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { hex: \"#000000\", show: true, animate: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      hex: this.props.hex,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.hex !== this.props.hex) {\r\n      this.setState({\r\n        animate: true,\r\n        hex: this.props.hex,\r\n      });\r\n    }\r\n  }\r\n\r\n  HexToHSL() {\r\n    var r = parseInt(this.state.hex.substring(1, 3), 16);\r\n    var g = parseInt(this.state.hex.substring(3, 5), 16);\r\n    var b = parseInt(this.state.hex.substring(5, 7), 16);\r\n\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n      cmax = Math.max(r, g, b),\r\n      delta = cmax - cmin,\r\n      h = 0,\r\n      s = 0,\r\n      l = 0;\r\n\r\n    if (delta === 0) h = 0;\r\n    else if (cmax === r) h = ((g - b) / delta) % 6;\r\n    else if (cmax === g) h = (b - r) / delta + 2;\r\n    else h = (r - g) / delta + 4;\r\n\r\n    h = Math.round(h * 60);\r\n\r\n    if (h < 0) h += 360;\r\n\r\n    l = (cmax + cmin) / 2;\r\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n    s = Math.floor(s * 100);\r\n    l = Math.floor(l * 100);\r\n\r\n    return \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\";\r\n  }\r\n\r\n  HexToRGB() {\r\n    var r = parseInt(this.state.hex.substring(1, 3), 16);\r\n    var g = parseInt(this.state.hex.substring(3, 5), 16);\r\n    var b = parseInt(this.state.hex.substring(5, 7), 16);\r\n    return \"R: \" + r + \" G: \" + g + \" B: \" + b;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <OverlayTrigger\r\n          placement=\"bottom\"\r\n          delay={{ show: 100, hide: 500 }}\r\n          overlay={\r\n            <Tooltip id=\"tooltip-color\">\r\n              {this.state.hex}\r\n              <br />\r\n              {this.HexToRGB()}\r\n              <br />\r\n              {this.HexToHSL()}\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <div\r\n            id=\"result-color\"\r\n            className={\r\n              this.state.show\r\n                ? \"result-color-animation-show\"\r\n                : this.state.animate\r\n                ? \"result-color-animation-change\"\r\n                : \"\"\r\n            }\r\n            style={{ background: this.state.hex }}\r\n            onAnimationEnd={() =>\r\n              this.setState({ show: false, animate: false })\r\n            }\r\n          ></div>\r\n        </OverlayTrigger>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass Colors extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      size: 1,\r\n      paletteType: 0,\r\n      colors: [\"#000000\"],\r\n      settingsShow: false,\r\n    };\r\n  }\r\n\r\n  handleSizeChange = (event) => {\r\n    var newSize = parseInt(event.target.value);\r\n    if (newSize < 1) {\r\n      newSize = 1;\r\n    }\r\n\r\n    this.setState({\r\n      size: newSize,\r\n    });\r\n  };\r\n\r\n  handlePaletteChange = (event) => {\r\n    let selected = event.target.value;\r\n    var type = -1;\r\n    for (var i = 0; i < paletteList.length; i++) {\r\n      if (selected === paletteList[i]) {\r\n        type = i;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      paletteType: type,\r\n    });\r\n  };\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  RGBtoHex(r, g, b) {\r\n    var redHex = r.toString(16);\r\n    if (redHex.length < 2) {\r\n      redHex = \"0\" + redHex;\r\n    }\r\n\r\n    var greenHex = g.toString(16);\r\n    if (greenHex.length < 2) {\r\n      greenHex = \"0\" + greenHex;\r\n    }\r\n\r\n    var blueHex = b.toString(16);\r\n    if (blueHex.length < 2) {\r\n      blueHex = \"0\" + blueHex;\r\n    }\r\n\r\n    var hex = \"#\";\r\n    return hex.concat(redHex, greenHex, blueHex).toUpperCase();\r\n  }\r\n\r\n  HSLtoHex(h, s, l) {\r\n    s /= 100;\r\n    l /= 100;\r\n\r\n    let c = (1 - Math.abs(2 * l - 1)) * s,\r\n      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\r\n      m = l - c / 2,\r\n      r = 0,\r\n      g = 0,\r\n      b = 0;\r\n\r\n    if (0 <= h && h < 60) {\r\n      r = c;\r\n      g = x;\r\n      b = 0;\r\n    } else if (60 <= h && h < 120) {\r\n      r = x;\r\n      g = c;\r\n      b = 0;\r\n    } else if (120 <= h && h < 180) {\r\n      r = 0;\r\n      g = c;\r\n      b = x;\r\n    } else if (180 <= h && h < 240) {\r\n      r = 0;\r\n      g = x;\r\n      b = c;\r\n    } else if (240 <= h && h < 300) {\r\n      r = x;\r\n      g = 0;\r\n      b = c;\r\n    } else if (300 <= h && h < 360) {\r\n      r = c;\r\n      g = 0;\r\n      b = x;\r\n    }\r\n\r\n    r = Math.round((r + m) * 255);\r\n    g = Math.round((g + m) * 255);\r\n    b = Math.round((b + m) * 255);\r\n\r\n    return this.RGBtoHex(r, g, b);\r\n  }\r\n\r\n  generateRandomColor() {\r\n    let red = Math.floor(Math.random() * 256);\r\n    let green = Math.floor(Math.random() * 256);\r\n    let blue = Math.floor(Math.random() * 256);\r\n\r\n    return this.RGBtoHex(red, green, blue);\r\n  }\r\n\r\n  generateSingleHue(h, range, min) {\r\n    let hue = Math.floor(Math.random() * 10) + (h - 5);\r\n    let saturation = Math.floor(Math.random() * range) + min;\r\n    let lightness = Math.floor(Math.random() * range) + min;\r\n\r\n    return this.HSLtoHex(hue, saturation, lightness);\r\n  }\r\n\r\n  generateNeon() {\r\n    let hue = Math.floor(Math.random() * 360);\r\n    let saturation = Math.floor(Math.random() * 10) + 90;\r\n    let lightness = 50;\r\n\r\n    return this.HSLtoHex(hue, saturation, lightness);\r\n  }\r\n\r\n  generatePastel() {\r\n    let hue = Math.floor(Math.random() * 360);\r\n    let saturation = Math.floor(Math.random() * 20) + 80;\r\n    let lightness = Math.floor(Math.random() * 25) + 75;\r\n\r\n    return this.HSLtoHex(hue, saturation, lightness);\r\n  }\r\n\r\n  generateColor() {\r\n    var newColors = [];\r\n    let rH = Math.floor(Math.random() * 360);\r\n\r\n    for (var i = 0; i < this.state.size; i++) {\r\n      var hex = \"\";\r\n\r\n      switch (this.state.paletteType) {\r\n        case 0:\r\n          // Completely Random Case\r\n          hex = this.generateRandomColor();\r\n          break;\r\n        case 1:\r\n          // One hue\r\n          hex = this.generateSingleHue(rH, 100, 0);\r\n          break;\r\n        case 2:\r\n          // Two Hues\r\n          hex = this.generateSingleHue(\r\n            (rH + (360 / 2) * (i % 2)) % 360,\r\n            50,\r\n            25\r\n          );\r\n          break;\r\n        case 3:\r\n          // Three hues\r\n          hex = this.generateSingleHue(\r\n            (rH + (360 / 3) * (i % 3)) % 360,\r\n            50,\r\n            25\r\n          );\r\n          break;\r\n        case 4:\r\n          // Neon\r\n          hex = this.generateNeon();\r\n          break;\r\n        case 5:\r\n          // Pastel\r\n          hex = this.generatePastel();\r\n          break;\r\n        default:\r\n          hex = this.generateRandomColor();\r\n      }\r\n\r\n      newColors.push(hex);\r\n    }\r\n\r\n    this.setState({\r\n      colors: newColors,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Colors</h1>\r\n        <p>\r\n          Generate a random color or a color palette. Choose from different\r\n          palettes to customize the feel.\r\n        </p>\r\n\r\n        <div className=\"result-container\">\r\n          <div className=\"result\">\r\n            {this.state.colors.map((item) => (\r\n              <ColorDisplay hex={item} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <Button onClick={() => this.generateColor()}>Generate</Button>\r\n        <br />\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow}>\r\n            <Form>\r\n              <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                <Form.Label>Number of Colors to Generate:</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.state.size}\r\n                  onChange={this.handleSizeChange}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                <Form.Label>Palette Type:</Form.Label>\r\n                <Form.Control as=\"select\" onChange={this.handlePaletteChange}>\r\n                  {paletteList.map((i) => (\r\n                    <option key={i}>{i}</option>\r\n                  ))}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Colors;\r\n","import React from \"react\";\r\n\r\nimport { Button, Collapse, Form } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nclass SequencesElement extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { settingsShow: false };\r\n  }\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  getRandomElement() {}\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Random Element</h1>\r\n        <p>\r\n          Give a list of words and we will select a random element from the\r\n          list.\r\n        </p>\r\n        <div className=\"resultContainer\">\r\n          <div className=\"result\"></div>\r\n        </div>\r\n\r\n        <Button onClick={() => this.getRandomElement()}>Generate</Button>\r\n        <br />\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow} fluid>\r\n            <Form></Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SequencesElement;\r\n","import React from \"react\";\r\n\r\nimport { Button, Collapse, Form } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nclass SequencesRandomize extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { settingsShow: false };\r\n  }\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  randomizeSequence() {}\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Randomize Sequence</h1>\r\n        <p>Randomize a list</p>\r\n        <div className=\"resultContainer\">\r\n          <div className=\"result\"></div>\r\n        </div>\r\n\r\n        <Button onClick={() => this.randomizeSequence()}>Generate</Button>\r\n        <br />\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow} fluid>\r\n            <Form></Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SequencesRandomize;\r\n","import React from \"react\";\n\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\n\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Numbers from \"./generator/numbers/numbers.jsx\";\nimport Colors from \"./generator/colors/colors.jsx\";\nimport SequenceElement from \"./generator/sequences/sequences-element.jsx\";\nimport SequenceRandomize from \"./generator/sequences/sequences-randomize.jsx\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <Router basename=\"/\">\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n              <Navbar.Brand as={Link} to=\"/\">\n                Generator\n              </Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                  <Nav.Link as={Link} to=\"/numbers\">\n                    Numbers\n                  </Nav.Link>\n                  <Nav.Link as={Link} to=\"/colors\">\n                    Colors\n                  </Nav.Link>\n                  <NavDropdown title=\"Sequences\" id=\"sequences-dropdown\">\n                    <NavDropdown.Item as={Link} to=\"/sequences/element\">\n                      Random Element\n                    </NavDropdown.Item>\n                    <NavDropdown.Item as={Link} to=\"/sequences/randomize\">\n                      Randomize Sequence\n                    </NavDropdown.Item>\n                  </NavDropdown>\n                </Nav>\n              </Navbar.Collapse>\n            </Navbar>\n            <br />\n            <Switch>\n              <Route exact path=\"/\">\n                Home page WIP\n                <br />\n                Last Updated: 5/22/2020 3:16 AM\n              </Route>\n              <Route path=\"/numbers\">\n                <Numbers />\n              </Route>\n              <Route path=\"/colors\">\n                <Colors />\n              </Route>\n              <Route path=\"/sequences/element\">\n                <SequenceElement />\n              </Route>\n              <Route path=\"/sequences/randomize\">\n                <SequenceRandomize />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}