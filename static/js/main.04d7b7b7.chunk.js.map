{"version":3,"sources":["generator/HomePage.jsx","generator/numbers/numbers.jsx","generator/colors/colors.jsx","generator/sequences/sequences-element.jsx","generator/sequences/sequences-randomize.jsx","generator/words/string.jsx","generator/words/name.jsx","App.js","serviceWorker.js","index.js"],"names":["listOfGenerators","name","link","description","GeneratorCard","input","item","obj","Card","className","border","bg","Header","Title","Body","Button","as","Link","to","variant","id","HomePage","state","CardColumns","map","gen","React","Component","NumberGenerator","handleMinChange","event","newMin","parseInt","target","value","setState","min","handleMaxChange","newMax","max","handleSizeChange","newSize","size","handleClose","resultShow","handleDecimalChange","prev","decimal","handleDigitsChange","newDigit","digits","setSettingsShow","visibility","settingsShow","result","prevResult","animate","Math","floor","random","this","toFixed","alert","i","resultArr","randomDecimal","randomInteger","newResult","cur","toString","length","onAnimationEnd","onClick","generateNum","Modal","show","centered","class","Footer","aria-controls","aria-expanded","Collapse","in","fluid","Form","Group","Row","Label","column","sm","Col","Control","type","onChange","Check","label","paletteList","ColorDisplay","hex","props","prevProps","r","substring","g","b","cmin","cmax","delta","h","s","l","round","abs","OverlayTrigger","placement","delay","hide","overlay","Tooltip","HexToRGB","HexToHSL","style","background","ColorGenerator","handlePaletteChange","selected","paletteType","colors","redHex","greenHex","blueHex","concat","toUpperCase","c","x","m","RGBtoHex","red","green","blue","range","hue","saturation","lightness","HSLtoHex","newColors","rH","generateRandomColor","generateSingleHue","generateNeon","generatePastel","push","generateColor","key","SequencesElement","handleInput","array","split","index","wrap","placeholder","getRandomElement","SequencesRandomize","temp","shuffle","text","forEach","element","slice","randomizeSequence","StringGenerator","handleNumberOfStringsChange","newNumber","numberOfStrings","handleLowerChange","useLowerCase","handleUpperChange","useUpperCase","handleNumbersChange","useNumbers","handleSymbolChange","useSymbols","multipleShow","characterSet","results","String","fromCharCode","j","newString","generateString","checked","Name","generateName","App","basename","Navbar","expand","sticky","Brand","Toggle","Nav","NavDropdown","title","Item","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04d7b7b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Button, Card, CardColumns } from \"react-bootstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst listOfGenerators = [\r\n  {\r\n    name: \"Number\",\r\n    link: \"/numbers\",\r\n    description: \"Generate a set of numbers\",\r\n  },\r\n  { name: \"Color\", link: \"/colors\", description: \"Generate a color palette\" },\r\n  {\r\n    name: \"Element\",\r\n    link: \"/sequences/element\",\r\n    description: \"Generate a random element from a list\",\r\n  },\r\n  {\r\n    name: \"Shuffle\",\r\n    link: \"/sequences/randomize\",\r\n    description: \"Get a random element from a list\",\r\n  },\r\n  {\r\n    name: \"String\",\r\n    link: \"/words/string\",\r\n    description: \"Generate a series of alphanumeric strings\",\r\n  },\r\n  {\r\n    name: \"Name\",\r\n    link: \"/words/name\",\r\n    description: \"Generate a name\",\r\n  },\r\n];\r\n\r\nconst GeneratorCard = (input) => {\r\n  let item = input.obj;\r\n\r\n  return (\r\n    <Card className=\"home-card\" border=\"secondary\" bg=\"dark\">\r\n      <Card.Header>\r\n        <Card.Title>{item.name} Generator</Card.Title>\r\n      </Card.Header>\r\n      <Card.Body>{item.description}</Card.Body>\r\n      <Button\r\n        as={Link}\r\n        to={item.link}\r\n        variant=\"secondary\"\r\n        id=\"home-card-footer\"\r\n      >\r\n        Goto Page\r\n      </Button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nclass HomePage extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"card-container\">\r\n          <CardColumns>\r\n            {listOfGenerators.map((gen) => (\r\n              <GeneratorCard obj={gen} />\r\n            ))}\r\n          </CardColumns>\r\n        </div>\r\n        <br />\r\n        Last Updated: 5/29/2020 1:52 AM\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\n\r\nimport { Button, Col, Collapse, Form, Modal, Row } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nconst MIN_VALUE = -10000000000;\r\nconst MAX_VALUE = 10000000000;\r\nconst MAX_SIZE = 100000;\r\nconst MAX_DIGIT = 20;\r\n\r\nclass NumberGenerator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      result: [0],\r\n      prevResult: 0,\r\n      min: 0,\r\n      max: 10,\r\n      size: 1,\r\n      decimal: false,\r\n      digits: 2,\r\n      settingsShow: false,\r\n      resultShow: false,\r\n      animate: false,\r\n    };\r\n  }\r\n\r\n  handleMinChange = (event) => {\r\n    var newMin = parseInt(event.target.value);\r\n    if (newMin < MIN_VALUE) {\r\n      newMin = MIN_VALUE;\r\n    }\r\n\r\n    this.setState({\r\n      min: newMin,\r\n    });\r\n  };\r\n\r\n  handleMaxChange = (event) => {\r\n    var newMax = parseInt(event.target.value);\r\n    if (newMax > MAX_VALUE) {\r\n      newMax = MAX_VALUE;\r\n    }\r\n\r\n    this.setState({\r\n      max: newMax,\r\n    });\r\n  };\r\n\r\n  handleSizeChange = (event) => {\r\n    var newSize = parseInt(event.target.value);\r\n    if (newSize > MAX_SIZE) {\r\n      newSize = MAX_SIZE;\r\n    } else if (newSize < 1) {\r\n      newSize = 1;\r\n    }\r\n\r\n    this.setState({\r\n      size: newSize,\r\n    });\r\n  };\r\n\r\n  handleClose = (event) => {\r\n    this.setState({\r\n      resultShow: false,\r\n    });\r\n  };\r\n\r\n  handleDecimalChange = (event) => {\r\n    this.setState((prev) => {\r\n      return {\r\n        decimal: !prev.decimal,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleDigitsChange = (event) => {\r\n    var newDigit = parseInt(event.target.value);\r\n    if (newDigit < 1) {\r\n      newDigit = 1;\r\n    } else if (newDigit > MAX_DIGIT) {\r\n      newDigit = MAX_DIGIT;\r\n    }\r\n\r\n    this.setState({ digits: newDigit });\r\n  };\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  randomInteger() {\r\n    return Math.floor(\r\n      Math.random() * (this.state.max - this.state.min + 1) + this.state.min\r\n    );\r\n  }\r\n\r\n  randomDecimal() {\r\n    return (\r\n      Math.random() * (this.state.max - this.state.min) +\r\n      this.state.min\r\n    ).toFixed(this.state.digits);\r\n  }\r\n\r\n  generateNum() {\r\n    if (this.state.max <= this.state.min) {\r\n      alert(\"Invalid range!\");\r\n    } else if (this.state.size > 1) {\r\n      var resultArr = [];\r\n      var i;\r\n      for (i = 0; i < this.state.size; i++) {\r\n        resultArr[i] = this.state.decimal\r\n          ? this.randomDecimal()\r\n          : this.randomInteger();\r\n      }\r\n\r\n      this.setState({\r\n        resultShow: true,\r\n        result: resultArr,\r\n      });\r\n    } else {\r\n      let newResult = [\r\n        this.state.decimal ? this.randomDecimal() : this.randomInteger(),\r\n      ];\r\n\r\n      this.setState((cur) => ({\r\n        result: newResult,\r\n        prevResult: newResult.toString().length < 9 ? cur.result[0] : null,\r\n        animate: true,\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Numbers</h1>\r\n        <p className=\"description-text\">\r\n          Get a series of random numbers within a range\r\n        </p>\r\n        <div className=\"result-container\">\r\n          <div\r\n            className={\r\n              this.state.animate\r\n                ? \"result-previous result-previous-animation\"\r\n                : \"result-previous\"\r\n            }\r\n            id=\"result-numbers-prev\"\r\n          >\r\n            {this.state.prevResult}\r\n          </div>\r\n          <div\r\n            className={\r\n              this.state.animate ? \"result result-num-animation\" : \"result\"\r\n            }\r\n            id=\"result-numbers\"\r\n            onAnimationEnd={() => this.setState({ animate: false })}\r\n          >\r\n            <b>{this.state.result[0]}</b>\r\n          </div>\r\n          <div className=\"result\"></div>\r\n        </div>\r\n\r\n        <Button onClick={() => this.generateNum()}>Generate</Button>\r\n        <br />\r\n\r\n        <Modal show={this.state.resultShow} size=\"lg\" centered>\r\n          <Modal.Header>\r\n            <Modal.Title>Results:</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <ul class=\"multiple-result\">\r\n              {this.state.result.map((item) => (\r\n                <li>{item}</li>\r\n              ))}\r\n            </ul>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow} fluid>\r\n            <Form>\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={1}>\r\n                  Min:\r\n                </Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.min}\r\n                    onChange={this.handleMinChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={1}>\r\n                  Max:\r\n                </Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.max}\r\n                    onChange={this.handleMaxChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <hr />\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={3}>\r\n                  How many numbers to generate:\r\n                </Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.size}\r\n                    onChange={this.handleSizeChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <hr />\r\n              <Form.Group as={Row}>\r\n                <Col>\r\n                  <Form.Check\r\n                    type=\"checkbox\"\r\n                    id=\"decimal-checkbox\"\r\n                    label=\"decimal?\"\r\n                    onChange={this.handleDecimalChange}\r\n                  />\r\n                </Col>\r\n                <Form.Label column sm={4}>\r\n                  Number of digits to round to:\r\n                </Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.digits}\r\n                    onChange={this.handleDigitsChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberGenerator;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  Collapse,\r\n  Form,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n  Row,\r\n} from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nlet paletteList = [\r\n  \"None (Completely Random)\",\r\n  \"Selected Saturation (One Hue)\",\r\n  \"Complementary (Two Hues)\",\r\n  \"Triadic (Three Hues)\",\r\n  \"Neon\",\r\n  \"Pastel\",\r\n];\r\n\r\nconst MAX_SIZE = 100;\r\n\r\nclass ColorDisplay extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { hex: \"#000000\", show: true, animate: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      hex: this.props.hex,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.hex !== this.props.hex) {\r\n      this.setState({\r\n        animate: true,\r\n        hex: this.props.hex,\r\n      });\r\n    }\r\n  }\r\n\r\n  HexToHSL() {\r\n    var r = parseInt(this.state.hex.substring(1, 3), 16);\r\n    var g = parseInt(this.state.hex.substring(3, 5), 16);\r\n    var b = parseInt(this.state.hex.substring(5, 7), 16);\r\n\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n      cmax = Math.max(r, g, b),\r\n      delta = cmax - cmin,\r\n      h = 0,\r\n      s = 0,\r\n      l = 0;\r\n\r\n    if (delta === 0) h = 0;\r\n    else if (cmax === r) h = ((g - b) / delta) % 6;\r\n    else if (cmax === g) h = (b - r) / delta + 2;\r\n    else h = (r - g) / delta + 4;\r\n\r\n    h = Math.round(h * 60);\r\n\r\n    if (h < 0) h += 360;\r\n\r\n    l = (cmax + cmin) / 2;\r\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n    s = Math.floor(s * 100);\r\n    l = Math.floor(l * 100);\r\n\r\n    return \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\";\r\n  }\r\n\r\n  HexToRGB() {\r\n    var r = parseInt(this.state.hex.substring(1, 3), 16);\r\n    var g = parseInt(this.state.hex.substring(3, 5), 16);\r\n    var b = parseInt(this.state.hex.substring(5, 7), 16);\r\n    return \"R: \" + r + \" G: \" + g + \" B: \" + b;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <OverlayTrigger\r\n          placement=\"bottom\"\r\n          delay={{ show: 100, hide: 500 }}\r\n          overlay={\r\n            <Tooltip id=\"tooltip-color\">\r\n              {this.state.hex}\r\n              <br />\r\n              {this.HexToRGB()}\r\n              <br />\r\n              {this.HexToHSL()}\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <div\r\n            id=\"result-color\"\r\n            className={\r\n              this.state.show\r\n                ? \"result-color-animation-show\"\r\n                : this.state.animate\r\n                ? \"result-color-animation-change\"\r\n                : \"\"\r\n            }\r\n            style={{ background: this.state.hex }}\r\n            onAnimationEnd={() =>\r\n              this.setState({ show: false, animate: false })\r\n            }\r\n          ></div>\r\n        </OverlayTrigger>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass ColorGenerator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      size: 1,\r\n      paletteType: 0,\r\n      colors: [\"#000000\"],\r\n      settingsShow: false,\r\n    };\r\n  }\r\n\r\n  handleSizeChange = (event) => {\r\n    var newSize = parseInt(event.target.value);\r\n    if (newSize > MAX_SIZE) {\r\n      newSize = MAX_SIZE;\r\n    } else if (newSize < 1) {\r\n      newSize = 1;\r\n    }\r\n\r\n    this.setState({\r\n      size: newSize,\r\n    });\r\n  };\r\n\r\n  handlePaletteChange = (event) => {\r\n    let selected = event.target.value;\r\n    var type = -1;\r\n    for (var i = 0; i < paletteList.length; i++) {\r\n      if (selected === paletteList[i]) {\r\n        type = i;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      paletteType: type,\r\n    });\r\n  };\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  RGBtoHex(r, g, b) {\r\n    var redHex = r.toString(16);\r\n    if (redHex.length < 2) {\r\n      redHex = \"0\" + redHex;\r\n    }\r\n\r\n    var greenHex = g.toString(16);\r\n    if (greenHex.length < 2) {\r\n      greenHex = \"0\" + greenHex;\r\n    }\r\n\r\n    var blueHex = b.toString(16);\r\n    if (blueHex.length < 2) {\r\n      blueHex = \"0\" + blueHex;\r\n    }\r\n\r\n    var hex = \"#\";\r\n    return hex.concat(redHex, greenHex, blueHex).toUpperCase();\r\n  }\r\n\r\n  HSLtoHex(h, s, l) {\r\n    s /= 100;\r\n    l /= 100;\r\n\r\n    let c = (1 - Math.abs(2 * l - 1)) * s,\r\n      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\r\n      m = l - c / 2,\r\n      r = 0,\r\n      g = 0,\r\n      b = 0;\r\n\r\n    if (0 <= h && h < 60) {\r\n      r = c;\r\n      g = x;\r\n      b = 0;\r\n    } else if (60 <= h && h < 120) {\r\n      r = x;\r\n      g = c;\r\n      b = 0;\r\n    } else if (120 <= h && h < 180) {\r\n      r = 0;\r\n      g = c;\r\n      b = x;\r\n    } else if (180 <= h && h < 240) {\r\n      r = 0;\r\n      g = x;\r\n      b = c;\r\n    } else if (240 <= h && h < 300) {\r\n      r = x;\r\n      g = 0;\r\n      b = c;\r\n    } else if (300 <= h && h < 360) {\r\n      r = c;\r\n      g = 0;\r\n      b = x;\r\n    }\r\n\r\n    r = Math.round((r + m) * 255);\r\n    g = Math.round((g + m) * 255);\r\n    b = Math.round((b + m) * 255);\r\n\r\n    return this.RGBtoHex(r, g, b);\r\n  }\r\n\r\n  generateRandomColor() {\r\n    let red = Math.floor(Math.random() * 256);\r\n    let green = Math.floor(Math.random() * 256);\r\n    let blue = Math.floor(Math.random() * 256);\r\n\r\n    return this.RGBtoHex(red, green, blue);\r\n  }\r\n\r\n  generateSingleHue(h, range, min) {\r\n    let hue = Math.floor(Math.random() * 10) + (h - 5);\r\n    let saturation = Math.floor(Math.random() * range) + min;\r\n    let lightness = Math.floor(Math.random() * range) + min;\r\n\r\n    return this.HSLtoHex(hue, saturation, lightness);\r\n  }\r\n\r\n  generateNeon() {\r\n    let hue = Math.floor(Math.random() * 360);\r\n    let saturation = Math.floor(Math.random() * 10) + 90;\r\n    let lightness = 50;\r\n\r\n    return this.HSLtoHex(hue, saturation, lightness);\r\n  }\r\n\r\n  generatePastel() {\r\n    let hue = Math.floor(Math.random() * 360);\r\n    let saturation = Math.floor(Math.random() * 20) + 80;\r\n    let lightness = Math.floor(Math.random() * 25) + 75;\r\n\r\n    return this.HSLtoHex(hue, saturation, lightness);\r\n  }\r\n\r\n  generateColor() {\r\n    var newColors = [];\r\n    let rH = Math.floor(Math.random() * 360);\r\n\r\n    for (var i = 0; i < this.state.size; i++) {\r\n      var hex = \"\";\r\n\r\n      switch (this.state.paletteType) {\r\n        case 0:\r\n          // Completely Random Case\r\n          hex = this.generateRandomColor();\r\n          break;\r\n        case 1:\r\n          // One hue\r\n          hex = this.generateSingleHue(rH, 100, 0);\r\n          break;\r\n        case 2:\r\n          // Two Hues\r\n          hex = this.generateSingleHue(\r\n            (rH + (360 / 2) * (i % 2)) % 360,\r\n            50,\r\n            25\r\n          );\r\n          break;\r\n        case 3:\r\n          // Three hues\r\n          hex = this.generateSingleHue(\r\n            (rH + (360 / 3) * (i % 3)) % 360,\r\n            50,\r\n            25\r\n          );\r\n          break;\r\n        case 4:\r\n          // Neon\r\n          hex = this.generateNeon();\r\n          break;\r\n        case 5:\r\n          // Pastel\r\n          hex = this.generatePastel();\r\n          break;\r\n        default:\r\n          hex = this.generateRandomColor();\r\n      }\r\n\r\n      newColors.push(hex);\r\n    }\r\n\r\n    this.setState({\r\n      colors: newColors,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Colors</h1>\r\n        <p>\r\n          Generate a random color or a color palette. Choose from different\r\n          palettes to customize the feel. Hover over a color to see it's color\r\n          code.\r\n        </p>\r\n\r\n        <div className=\"result-container\">\r\n          <div className=\"result\">\r\n            {this.state.colors.map((item) => (\r\n              <ColorDisplay hex={item} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <Button onClick={() => this.generateColor()}>Generate</Button>\r\n        <br />\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow}>\r\n            <Form>\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={3}>\r\n                  Number of Colors to Generate:\r\n                </Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.size}\r\n                    onChange={this.handleSizeChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={3}>\r\n                  Palette Type:\r\n                </Form.Label>\r\n                <Col>\r\n                  <Form.Control as=\"select\" onChange={this.handlePaletteChange}>\r\n                    {paletteList.map((i) => (\r\n                      <option key={i}>{i}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorGenerator;\r\n","import React from \"react\";\r\n\r\nimport { Button, Collapse } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nclass SequencesElement extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { input: \"\", result: \"\", resultShow: false };\r\n  }\r\n\r\n  handleInput = (event) => {\r\n    this.setState({\r\n      input: event.target.value,\r\n    });\r\n  };\r\n\r\n  getRandomElement() {\r\n    if (this.state.input.length > 0) {\r\n      let array = this.state.input.split(/\\r?\\n/);\r\n      let index = Math.floor(Math.random() * array.length);\r\n\r\n      this.setState({\r\n        result: array[index],\r\n        resultShow: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        result: \"\",\r\n        resultShow: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Random Element</h1>\r\n        <p>\r\n          Give a list of words or phrases separated on a new line and hit\r\n          generate to get a random element from the list\r\n        </p>\r\n        <textarea\r\n          className=\"sequences-input\"\r\n          value={this.state.input}\r\n          onChange={this.handleInput}\r\n          wrap=\"off\"\r\n          placeholder=\"Enter list here\"\r\n        ></textarea>\r\n        <div className=\"result-container\">\r\n          <br />\r\n          <Collapse in={this.state.resultShow} fluid>\r\n            <div className=\"result\" id=\"result-element\">\r\n              Result: <b>{this.state.result}</b>\r\n            </div>\r\n          </Collapse>\r\n        </div>\r\n        <Button onClick={() => this.getRandomElement()}>Generate</Button>\r\n        <br />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SequencesElement;\r\n","import React from \"react\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nclass SequencesRandomize extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { input: \"\", result: \"\" };\r\n  }\r\n\r\n  handleInput = (event) => {\r\n    this.setState({\r\n      input: event.target.value,\r\n    });\r\n  };\r\n\r\n  randomizeSequence() {\r\n    var array = this.state.input.split(/\\r?\\n/);\r\n\r\n    var shuffle = array.length,\r\n      temp,\r\n      index;\r\n\r\n    // Shuffle the list using the Fisher-Yates shuffle\r\n    while (shuffle) {\r\n      index = Math.floor(Math.random() * shuffle--);\r\n\r\n      temp = array[shuffle];\r\n      array[shuffle] = array[index];\r\n      array[index] = temp;\r\n    }\r\n\r\n    var text = \"\";\r\n\r\n    array.forEach((element) => {\r\n      text = text.concat(element, \"\\n\");\r\n    });\r\n\r\n    this.setState({\r\n      // Slice the extra newline from the end of the output\r\n      input: text.slice(0, text.length - 1),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Randomize Sequence</h1>\r\n        <p>Randomize a list</p>\r\n        <textarea\r\n          className=\"sequences-input\"\r\n          value={this.state.input}\r\n          onChange={this.handleInput}\r\n          wrap=\"off\"\r\n          placeholder=\"Enter list here\"\r\n        ></textarea>\r\n        <br />\r\n        <Button onClick={() => this.randomizeSequence()}>Generate</Button>\r\n        <br />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SequencesRandomize;\r\n","import React from \"react\";\r\n\r\nimport { Button, Col, Collapse, Form, Modal, Row } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nconst MAX_CHARS = 30;\r\nconst MAX_SIZE = 100000;\r\n\r\nclass StringGenerator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      result: [\"Press Generate\"],\r\n      size: 8,\r\n      numberOfStrings: 1,\r\n      useLowerCase: true,\r\n      useUpperCase: false,\r\n      useNumbers: false,\r\n      useSymbols: false,\r\n      multipleShow: false,\r\n      animate: false,\r\n      settingsShow: false,\r\n    };\r\n  }\r\n\r\n  handleSizeChange = (event) => {\r\n    var newSize = parseInt(event.target.value);\r\n    if (newSize > MAX_CHARS) {\r\n      newSize = MAX_CHARS;\r\n    } else if (newSize < 1) {\r\n      newSize = 1;\r\n    }\r\n\r\n    this.setState({\r\n      size: newSize,\r\n    });\r\n  };\r\n\r\n  handleNumberOfStringsChange = (event) => {\r\n    var newNumber = parseInt(event.target.value);\r\n    if (newNumber > MAX_SIZE) {\r\n      newNumber = MAX_SIZE;\r\n    } else if (newNumber < 1) {\r\n      newNumber = 1;\r\n    }\r\n\r\n    this.setState({\r\n      numberOfStrings: newNumber,\r\n    });\r\n  };\r\n\r\n  handleLowerChange = () => {\r\n    this.setState((prev) => {\r\n      return {\r\n        useLowerCase: !prev.useLowerCase,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleUpperChange = () => {\r\n    this.setState((prev) => {\r\n      return {\r\n        useUpperCase: !prev.useUpperCase,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleNumbersChange = () => {\r\n    this.setState((prev) => {\r\n      return {\r\n        useNumbers: !prev.useNumbers,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleSymbolChange = () => {\r\n    this.setState((prev) => {\r\n      return {\r\n        useSymbols: !prev.useSymbols,\r\n      };\r\n    });\r\n  };\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      multipleShow: false,\r\n    });\r\n  };\r\n\r\n  generateString() {\r\n    if (\r\n      !this.state.useLowerCase &&\r\n      !this.state.useUpperCase &&\r\n      !this.state.useNumbers &&\r\n      !this.state.useSymbols\r\n    ) {\r\n      alert(\"Please select at least one character set!\");\r\n    }\r\n\r\n    var characterSet = [],\r\n      i,\r\n      results = [];\r\n\r\n    if (this.state.useLowerCase) {\r\n      for (i = 97; i < 123; i++) {\r\n        characterSet.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n\r\n    if (this.state.useUpperCase) {\r\n      for (i = 65; i < 91; i++) {\r\n        characterSet.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n\r\n    if (this.state.useNumbers) {\r\n      for (i = 48; i < 58; i++) {\r\n        characterSet.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n\r\n    if (this.state.useSymbols) {\r\n      for (i = 33; i < 48; i++) {\r\n        characterSet.push(String.fromCharCode(i));\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < this.state.numberOfStrings; i++) {\r\n      var newString = \"\",\r\n        j;\r\n      for (j = 0; j < this.state.size; j++) {\r\n        let c = characterSet[Math.floor(Math.random() * characterSet.length)];\r\n        newString += c;\r\n      }\r\n      results[i] = newString;\r\n    }\r\n\r\n    if (this.state.numberOfStrings > 1) {\r\n      this.setState({\r\n        result: results,\r\n        multipleShow: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        result: results,\r\n        multipleShow: false,\r\n        animate: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>String</h1>\r\n        <p>\r\n          Generate a random string of characters. Can be used for passwords.\r\n        </p>\r\n        <div className=\"result-container\">\r\n          <div\r\n            className={\r\n              this.state.animate ? \"result result-string-animation\" : \"result\"\r\n            }\r\n            id=\"result-string\"\r\n            onAnimationEnd={() => this.setState({ animate: false })}\r\n          >\r\n            <b>{this.state.result[0]}</b>\r\n          </div>\r\n        </div>\r\n\r\n        <Modal show={this.state.multipleShow} size=\"lg\" centered>\r\n          <Modal.Header>\r\n            <Modal.Title>Results:</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <ul class=\"multiple-result\">\r\n              {this.state.result.map((item) => (\r\n                <li>{item}</li>\r\n              ))}\r\n            </ul>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Button onClick={() => this.generateString()}>Generate</Button>\r\n        <br />\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow} fluid>\r\n            <Form>\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={2}>\r\n                  Size of String:\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.size}\r\n                    onChange={this.handleSizeChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm={2}>\r\n                  Number of Strings to Generate:\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={this.state.numberOfStrings}\r\n                    onChange={this.handleNumberOfStringsChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <hr />\r\n              <Form.Group as={Row}>\r\n                <Form.Label as=\"legend\" column sm={2}>\r\n                  Character set:\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                  <Form.Check\r\n                    label=\"use lower case (a-z)\"\r\n                    name=\"lowercase-checkbox\"\r\n                    checked={this.state.useLowerCase}\r\n                    onChange={this.handleLowerChange}\r\n                  />\r\n                  <Form.Check\r\n                    label=\"use upper case (A-Z)\"\r\n                    name=\"uppercase-checkbox\"\r\n                    checked={this.state.useUpperCase}\r\n                    onChange={this.handleUpperChange}\r\n                  />\r\n                  <Form.Check\r\n                    label=\"use numbers (0-9)\"\r\n                    name=\"numbers-checkbox\"\r\n                    checked={this.state.useNumbers}\r\n                    onChange={this.handleNumbersChange}\r\n                  />\r\n                  <Form.Check\r\n                    label=\"use symbols\"\r\n                    name=\"symbol-checkbox\"\r\n                    checked={this.state.useSymbols}\r\n                    onChange={this.handleSymbolChange}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StringGenerator;\r\n","import React from \"react\";\r\n\r\nimport { Button, Collapse, Form } from \"react-bootstrap\";\r\n\r\nimport \"../generator.css\";\r\n\r\nclass Name extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { settingsShow: false };\r\n  }\r\n\r\n  setSettingsShow = (visibility) => {\r\n    this.setState({\r\n      settingsShow: visibility,\r\n    });\r\n  };\r\n\r\n  generateName() {}\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Name</h1>\r\n        <p>Generate a random name.</p>\r\n        <div className=\"result-container\">\r\n          <div className=\"result\"></div>\r\n        </div>\r\n\r\n        <Button onClick={() => this.generateName()}>Generate</Button>\r\n        <br />\r\n\r\n        <Button\r\n          onClick={() => this.setSettingsShow(!this.state.settingsShow)}\r\n          aria-controls=\"collapse-settings\"\r\n          aria-expanded={this.state.settingsShow}\r\n          className=\"settings-button\"\r\n        >\r\n          Settings\r\n        </Button>\r\n        <br />\r\n        <div className=\"settings\">\r\n          <Collapse in={this.state.settingsShow} fluid>\r\n            <Form></Form>\r\n          </Collapse>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Name;\r\n","import React from \"react\";\n\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\n\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport HomePage from \"./generator/HomePage\";\nimport NumberGenerator from \"./generator/numbers/numbers.jsx\";\nimport ColorGenerator from \"./generator/colors/colors.jsx\";\nimport SequenceElement from \"./generator/sequences/sequences-element.jsx\";\nimport SequenceRandomize from \"./generator/sequences/sequences-randomize.jsx\";\nimport StringGenerator from \"./generator/words/string.jsx\";\nimport NameGenerator from \"./generator/words/name.jsx\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <Router basename=\"/\">\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n              <Navbar.Brand as={Link} to=\"/\">\n                Generator\n              </Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                  <Nav.Link as={Link} to=\"/numbers\">\n                    Numbers\n                  </Nav.Link>\n                  <Nav.Link as={Link} to=\"/colors\">\n                    Colors\n                  </Nav.Link>\n                  <NavDropdown title=\"Sequences\" id=\"sequences-dropdown\">\n                    <NavDropdown.Item as={Link} to=\"/sequences/element\">\n                      Random Element\n                    </NavDropdown.Item>\n                    <NavDropdown.Item as={Link} to=\"/sequences/randomize\">\n                      Randomize Sequence\n                    </NavDropdown.Item>\n                  </NavDropdown>\n                  <NavDropdown title=\"Words\" id=\"words-dropdown\">\n                    <NavDropdown.Item as={Link} to=\"/words/string\">\n                      Random String\n                    </NavDropdown.Item>\n                    <NavDropdown.Item as={Link} to=\"/words/name\">\n                      Random Name\n                    </NavDropdown.Item>\n                  </NavDropdown>\n                </Nav>\n              </Navbar.Collapse>\n            </Navbar>\n            <br />\n            <Switch>\n              <Route exact path=\"/\">\n                <HomePage />\n              </Route>\n              <Route path=\"/numbers\">\n                <NumberGenerator />\n              </Route>\n              <Route path=\"/colors\">\n                <ColorGenerator />\n              </Route>\n              <Route path=\"/sequences/element\">\n                <SequenceElement />\n              </Route>\n              <Route path=\"/sequences/randomize\">\n                <SequenceRandomize />\n              </Route>\n              <Route path=\"/words/string\">\n                <StringGenerator />\n              </Route>\n              <Route path=\"/words/name\">\n                <NameGenerator />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}